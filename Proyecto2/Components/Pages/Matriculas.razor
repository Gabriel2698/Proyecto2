@page "/Matriculas"

@using Microsoft.EntityFrameworkCore;
@using Proyecto2.Models
@using Proyecto2.Server.Data
@inject ApplicationDbContext _context


<h3>Matricularse en un Horario</h3>

<EditForm Model="nuevaMatricula" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <!-- Selección del Cliente -->
    <div class="form-group">
        <label for="ClienteId">Cliente:</label>
        <select class="form-control" id="ClienteId" @bind="nuevaMatricula.ClienteId">
            <option value="">Seleccione un Cliente</option>
            @foreach (var cliente in clientes)
            {
                <option value="@cliente.Id">@cliente.Nombre</option>
            }
        </select>
    </div>

    <!-- Selección del Horario -->
    <div class="form-group">
        <label for="HorarioId">Horario:</label>
        <select class="form-control" id="HorarioId" @onchange="CargarDetallesHorario">
            <option value="">Seleccione un Horario</option>
            @foreach (var horario in horarios)
            {
                <option value="@horario.Id">@horario.HorarioClase</option>
            }
        </select>
    </div>

    <!-- Entrenador y Punto Fuerte -->
    @if (horarioSeleccionado != null)
    {
        <div class="form-group">
            <label>Entrenador:</label>
            <input type="text" class="form-control" value="@horarioSeleccionado.NombreEntrenador" readonly />
        </div>

        <div class="form-group">
            <label>Punto Fuerte:</label>
            <input type="text" class="form-control" value="@horarioSeleccionado.PuntoFuerte" readonly />
        </div>
    }

    <button type="submit" class="btn btn-primary mt-3">Matricular</button>
</EditForm>

<h4>Lista de Matrículas</h4>
<table class="table table-striped">
    <thead>
        <tr>
            <th>Cliente</th>
            <th>Horario</th>
            <th>Entrenador</th>
            <th>Punto Fuerte</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var matricula in listaMatriculas)
        {
            <tr>
                <td>@clientes.FirstOrDefault(c => c.Id == matricula.ClienteId)?.Nombre</td>
                <td>@horarios.FirstOrDefault(h => h.Id == matricula.HorarioId)?.HorarioClase</td>
                <td>@matricula.NombreEntrenador</td>
                <td>@matricula.PuntoFuerte</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private Matricula nuevaMatricula = new Matricula();
    private List<Cliente> clientes = new List<Cliente>();
    private List<Horario> horarios = new List<Horario>();
    private List<Matricula> listaMatriculas = new List<Matricula>();
    private Horario? horarioSeleccionado;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Cargar datos iniciales
            clientes = await _context.Clientes.ToListAsync();
            horarios = await _context.Horarios.ToListAsync();
            listaMatriculas = await _context.Matriculas.ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar los datos: {ex.Message}");
        }
    }

    private async Task CargarDetallesHorario(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int horarioId))
        {
            horarioSeleccionado = await _context.Horarios
                .FirstOrDefaultAsync(h => h.Id == horarioId);

            if (horarioSeleccionado != null)
            {
                nuevaMatricula.NombreEntrenador = horarioSeleccionado.NombreEntrenador;
                nuevaMatricula.PuntoFuerte = horarioSeleccionado.PuntoFuerte;
                nuevaMatricula.HorarioId = horarioSeleccionado.Id;  // Asignar HorarioId
            }

            StateHasChanged();
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            // Verificar si los campos ClienteId y HorarioId son válidos
            if (nuevaMatricula.ClienteId == 0 || nuevaMatricula.HorarioId == 0)
            {
                Console.WriteLine("Cliente o Horario no seleccionados");
                return;
            }

            // Agregar la matrícula al contexto y guardar
            _context.Matriculas.Add(nuevaMatricula);
            await _context.SaveChangesAsync();

            // Actualizar la lista de matrículas para reflejar los cambios
            listaMatriculas = await _context.Matriculas.ToListAsync();
            nuevaMatricula = new Matricula();  // Limpiar el formulario
            horarioSeleccionado = null;  // Limpiar el horario seleccionado
            StateHasChanged();  // Forzar la actualización de la vista
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar la matrícula: {ex.Message}");
        }
    }
}